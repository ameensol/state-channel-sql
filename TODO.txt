SOON
====

- Test with real, actual example values

- In general, state updates can be invalid in two ways:
    - "They could never be valid": negative value, etc
    - "They could eventually be valid": amount is greater than current channel
      value, we don't know the intended sender so we can't verify the sig, etc.
  And we need to figure out how to deal with this...

  Rule:

    The result of a state update insert reflects the state of the block chain
    *right now*. An insert will fail if it's invalid with respect to the
    present state, and will succeed in the event it's valid with respect to the
    present state.

    In the event of a reorg, we walk backwarfds through state updates,
    validating or invalidating them based on the present chain state.

    This will work because after a reorg, I BELIEVE (to be proven), that state
    update N - 1 will always be valid if state update N is valid.


CHECK THESE AT SOME POINT
=========================

- Somehow translate between the values coming from Web3 with the values we're
  expecting.
    - Will values be in wei or eth? (I think wei, but need to be sure)
    - Convert Web3 events into ChannelEvent (esp getting the block hash,
      timestamp, etc)

- Make sure that `mcy_insert_state_update` has locking or whatever to
  enforce serialization

- License, name, etc in package.json

- Ongoing maintenance and update workflow


Performance Improvements
========================

- Try adding an index on state_updates which includes the price so PG 9.6 can
  do an index-only scan:

    create index state_updates_chain_contract_chan_seq_amt_idx
    on state_updates (chain_id, contract_id, channel_id, amount, nonce);
